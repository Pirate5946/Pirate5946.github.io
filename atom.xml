<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pirate5946</title>
  
  <subtitle>coding world, coding life.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-23T04:49:31.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Pirate5946</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java知识体系 -- JVM篇</title>
    <link href="http://yoursite.com/2020/05/23/JVM-2017-09-21-Java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB-JVM%E7%AF%87/"/>
    <id>http://yoursite.com/2020/05/23/JVM-2017-09-21-Java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB-JVM%E7%AF%87/</id>
    <published>2020-05-23T04:49:31.000Z</published>
    <updated>2020-05-23T04:49:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章</p><ul><li><a href="http://blog.csdn.net/boyupeng/article/details/47951037" target="_blank" rel="noopener">类加载机制（类加载过程和类加载器）</a></li><li><a href="http://blog.csdn.net/likika2012/article/details/45575285" target="_blank" rel="noopener">JVM加载class文件的原理</a><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><blockquote><p>类加载机制的定义</p></blockquote></li></ul><p>JVM 通过 ClassLaoder 将 主机硬盘里的 <strong>Class文件</strong>（8字节为单位的二进制流，任何编程语言通过各自的编译器都能编译成对应的Class文件） 加载到 JVM的方法区，<br>并对方法区中 <strong>Class字节码</strong>进行 校验、解析、和初始化、最终形成可以被JVM直接使用的 <strong>数据类型</strong></p><h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><ol><li>类文件的加载     <ul><li>通过一个类的名字==获取此类的二进制字节流==（PS：不限于从文件中读取）<ul><li>从EAR包、WAR包、JAR包中获取</li><li>从网络中获取，这种场景最典型的应用就是Applet</li><li>运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy 中，就是用了ProxyGenerator.generateProxyClass来为特定接口生成形式为“*$Proxy”的代理类 的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。(<strong>运行时数据结构是什么</strong>，由具体的虚拟机自己定义) </li><li>在内存中==生成一个代表这个类的java.lang.Class对象==，作为方法区这个类的各种数据的访问入口。</li></ul></li></ul></li></ol><p>当类加载完成后，系统会给为之生成一个对象 ==（对象的实例化，还没有被栈里的指针引用）==<br><strong>defineClass方法可以把二进制流字节组成的文件转换为一个java.lang.Class</strong>（只要二进制字节流的内容符合Class文件规范）。==这个对象作为程序访问方法区中的这些类型数据的外部接口==</p><p>==随后进入链接阶段，链接阶段负责把类的二进制数据添加到JRE中。==</p><hr><h3 id="类的链接"><a href="#类的链接" class="headerlink" title="类的链接"></a>类的链接</h3><ol start="2"><li>Class文件的==字节流验证==：<ul><li>文件格式验证</li><li>元数据验证（语义分析，类与类的继承关系等）</li><li>字节码验证（数据流和控制流分析）</li><li>符号引用验证（对类自身以外的信息进行匹配校验）</li></ul></li><li>准备<br> 正式为类变量分配内存并设置<strong>默认初始值</strong>，这里类变量指的是被static修饰的变量。例外：如果类字段是常量 <strong>(被final修饰)</strong>，则在这里会被初始化为表达式指定的值</li><li>解析：<br>将常量池内的符号引用替换为直接引用。<br>符号引用：类似于OS中的逻辑地址；<br>直接引用：类似于OS中的物理地址，直接指向目标的指针、相对偏移量或一个能间接定位到目标的句柄。     </li></ol><hr><h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><ol start="5"><li>初始化：     </li></ol><p>真正开始执行类中定义的Java程序代码；初始化用于执行Java类的构造方法。<br>初始化阶段是执行类构造器<clinit>()方法的过程。  </p><p>在以下四种情况下初始化过程会被触发执行：    </p><ul><li>遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需先触发其初始化。<br>生成这4条指令的最常见的java代码场景是：<ul><li>使用new关键字实例化对象、</li><li>读取或设置一个类的静态字段的时候 (被final修饰、已在编译器把结果放入常量池的静态字段除外[intern()方法])，</li><li>调用类的静态方法的时候。</li></ul></li><li>使用java.lang.reflect包的方法对类进行反射调用的时候</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化、则需要先出发其父类的初始化</li><li>jvm启动时，用户指定一个执行的主类(包含main方法的那个类)，虚拟机会先初始化这个类</li></ul><p>举个栗子：<br>在上面<strong>准备阶段</strong> public static int value  = 12;  在准备阶段完成后 value的值为0，<br>而在<strong>初始化阶段</strong>调用了类构造器<clinit>()方法，这个阶段完成后value的值为12。</p><p>类初始化的过程是不可逆的，如果中间一步出错，则无法执行下一步</p><hr><h3 id="类加载器与双亲委派模型"><a href="#类加载器与双亲委派模型" class="headerlink" title="类加载器与双亲委派模型"></a>类加载器与双亲委派模型</h3><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/" target="_blank" rel="noopener">深入探讨 Java 类加载器</a></p><ol><li><p>Bootstrap ClassLoader :<br>将存放于<JAVA_HOME>\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar 名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用</p></li><li><p>Extension ClassLoader :<br>将<JAVA_HOME>\lib\ext目录下的，或者被java.ext.dirs系统变量所指定的路径中的所有类库加载。开发者可以直接使用扩展类加载器。</p></li><li><p>Application ClassLoader :<br>负责加载用户类路径(ClassPath)上所指定的类库,开发者可直接使用。</p></li></ol><p><img src="http://ovybbprpf.bkt.clouddn.com/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.png" alt="类加载器双亲委派模型"><br>工作过程：<br>如果一个类加载器接收到了类加载的请求，它首先把这个请求委托给他的父类加载器去完成，<br>每个层次的类加载器都是如此，因此<strong>所有的加载请求都应该传送到顶层的启动类加载器中</strong>，<br>只有当父加载器反馈自己无法完成这个加载请求（它在搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p><p>好处：</p><ol><li>安全性<br>避免用户编写的类动态替换Java的一些核心类    </li></ol><p><strong>java类随着它的类加载器一起具备了一种带有优先级的层次关系</strong>。<br>例如类java.lang.Object，它存放在rt.jar中，无论哪个类加载器要加载这个类，最终都会委派给启动类加载器进行加载，因此<strong>Object类在程序的各种类加载器环境中都是同一个类</strong>。<br>2. 避免类的重复加载<br> JVM中区分不同类，不仅仅是根据类名，相同的 class文件被不同的 ClassLoader加载就是不同的两个类。</p><p>相反，如果用户自己写了一个名为java.lang.Object的类，并放在程序的Classpath中，那系统中将会出现多个不同的Object类，java类型体系中最基础的行为也无法保证，应用程序也会变得一片混乱。</p><h3 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h3><p>所有加载过的类都会缓存在内存中，<br>如果程序中尝试使用某个class时，先从缓存中查找这个类；<br>如果不存在，则读取该类对应的二进制文件并将其转换为class对象并存入缓存区。<br>这就是为什么类修改后需要重启的原因。</p><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>java.lang.ClassLoader类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class类的一个实例</p><ol><li><p>从上面源码看出，调用loadClass时会先根据委派模型在父加载器中加载，如果加载失败，则会调用当前加载器的findClass来完成加载。</p></li><li><p>因此我们<strong>自定义的类加载器只需要继承ClassLoader</strong>，<strong>并覆盖findClass方法</strong>，下面是一个实际例子，在该例中我们用自定义的类加载器去加载我们事先准备好的class文件。         </p></li></ol><p><strong>ClassLoader.defineClass()方法可以把二进制流字节组成的文件转换为一个java.lang.Class</strong></p><p><a href="http://blog.csdn.net/boyupeng/article/details/47951037" target="_blank" rel="noopener">优秀文章 - 类加载分析，自定义类加载器</a></p><p><a href="http://blog.csdn.net/seu_calvin/article/details/52315125" target="_blank" rel="noopener">为什么要自定义类加载器</a></p><ul><li>对代码进行加密</li><li>从指定来源加载类</li><li>综合前两种情况</li></ul><h3 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h3><ol><li>Class.forName(“包名.类名”).newInstance();   // 类加载机制</li><li>new 类名();  // 类加载的初始化阶段</li></ol><p>newInstance()实际上是把new这个方式分解为两步，即首先调用Class加载方法加载某个类，然后实例化。<br>这样分步的好处是显而易见的。类的加载 和 类实例化 分开处理。<br>我们可以在调用class的静态加载方法forName时获得更好的灵活性，提供给了一种解耦的手段。</p><p>区别：      </p><ol><li>Class下的newInstance()的使用有局限，因为它生成对象只能调用无参的构造函数；使用 new关键字生成对象没有这个限制。</li><li>newInstance( )是一个方法，而new是一个关键字；</li></ol><hr><p>参考文章：  </p><ol><li><a href="http://blog.csdn.net/boyupeng/article/details/47948243" target="_blank" rel="noopener">垃圾回收机制 &amp;&amp; 弱引用</a><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2></li></ol><hr><p>参考文章    </p><ol><li><a href="http://blog.csdn.net/java2000_wl/article/details/8009362" target="_blank" rel="noopener"> Java虚拟机学习 - 体系结构 内存模型</a><h2 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h2></li></ol><p><img src="http://ovybbprpf.bkt.clouddn.com/JVM%E7%B3%BB%E5%88%97-%E5%86%85%E5%AD%98%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.png" alt="image"></p><p>JDK1.7以前 常量池是放在Java JVM中的方法区中的，许多人也叫它“永久代”     </p><p>JDK1.7中，这个常量池是移动到了java堆中去了</p><p>JDK1.8中，移除整个永久代（常量池），取而代之的是一个叫元空间（Metaspace）的区域，（使用本地内存来存储类元数据信息）</p><h3 id="内存分为哪几部分"><a href="#内存分为哪几部分" class="headerlink" title="内存分为哪几部分"></a>内存分为哪几部分</h3><p>1. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/boyupeng/article/details/47951037&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;类加载机制（类加载过程和类加载器）&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
      <category term="Java基础与提高" scheme="http://yoursite.com/categories/JVM/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%8F%90%E9%AB%98/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="Java知识体系" scheme="http://yoursite.com/tags/Java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>封装,继承,多态</title>
    <link href="http://yoursite.com/2020/05/23/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%8F%90%E9%AB%98-2017-09-12-%E5%B0%81%E8%A3%85%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E5%A4%9A%E6%80%81/"/>
    <id>http://yoursite.com/2020/05/23/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%8F%90%E9%AB%98-2017-09-12-%E5%B0%81%E8%A3%85%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E5%A4%9A%E6%80%81/</id>
    <published>2020-05-23T04:49:31.000Z</published>
    <updated>2020-05-23T04:49:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/chenssy/article/details/12757911" target="_blank" rel="noopener">Java提高篇1 - 封装</a></p><h3 id="Java特性-封装"><a href="#Java特性-封装" class="headerlink" title="Java特性 - 封装"></a>Java特性 - 封装</h3><ul><li><p>隐藏类的属性和内部方法，只暴露必要的访问接口</p></li><li><p>调整类的属性或者方法时，接口方法不用改动，调整内部实现就可以</p></li><li><p>可以对成员变量的访问进行控制，（进行逻辑判断检查输入的数据是否符合要求），提高代码健壮性</p></li></ul><hr><h3 id="Java特性-继承"><a href="#Java特性-继承" class="headerlink" title="Java特性 - 继承"></a>Java特性 - 继承</h3><p>1、子类拥有父类==非private==的属性和方法。</p><p>2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p><p>3、子类可以用自己的方式实现父类的方法。</p><p><strong>不支持多继承的原因</strong>：<br>==如果多个父类有共同方法，会产生调用不确定性==</p><p>this ： 代表一个本类对象的引用<br>super ： 代表一个父类空间   </p><blockquote><p>子类重写父类方法</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>子类重写父类方法时，子类权限必须要大于等于父类的权限</li><li>静态只能覆盖静态，或者被静态覆盖<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4>对一个类进行子类的扩展时，子类需要保留父类的方法声明，但是要定义子类中该方法的特有内容时，使用重写操作</li></ul><h4 id="子类的实例化过程"><a href="#子类的实例化过程" class="headerlink" title="子类的实例化过程"></a>子类的实例化过程</h4><p>==子类中所有的构造函数默认都会访问父类中的空参数的构造函数==  </p><h4 id="子类实例化的时候为什么要访问父类中的构造函数"><a href="#子类实例化的时候为什么要访问父类中的构造函数" class="headerlink" title="子类实例化的时候为什么要访问父类中的构造函数"></a>子类实例化的时候为什么要访问父类中的构造函数</h4><p>因为子类继承了父类，获取到了父类中的内容，所有在使用父类内容之前，要先看父类是如何对自己内容进行初始化的，所以子类在构造对象时，必须访问父类中的构造函数</p><p>如果父类中没有定义空参构造函数，那么子类==必须在子类构造函数第一行，显式写super语句==，如果使用了this调用本类的构造函数，那么就没有super了，子类中的其他构造函数会访问父类的构造函数</p><blockquote><p>讲到继承一定少不了这三个东西：构造器、protected关键字、向上转型     </p></blockquote><ul><li>构造器    </li></ul><p>通过前面我们知道子类可以继承父类的属性和方法，除了那些private的外还有一样是子类继承不了的—构造器。<br>对于构造器而言，它只能够被调用，而不能被继承。    </p><p>==对于继承来说，子类会默认调用父类的构造器，但是如果没有默认的父类构造器，子类必须要显示的指定父类的构造器==，而且必须是在子类构造器中做的第一件事(第一行代码)。       </p><p>调用父类的构造方法我们使用super()即可。</p><ul><li><p>protected关键字<br>protected修饰的类，只可以被==子类==以及与它位于==同一个包的类==访问到</p></li><li><p>向上转型<br>将子类转换成父类，在继承关系上面是向上移动的，所以一般称之为向上转型。<br>由于向上转型是从一个叫专用类型向较通用类型转换，所以它总是安全的，唯一发生变化的可能就是属性和方法的丢失。</p></li></ul><h4 id="谨慎使用继承"><a href="#谨慎使用继承" class="headerlink" title="谨慎使用继承"></a>谨慎使用继承</h4><p>继承存在如下缺陷：<br>1、父类变，子类就必须变。   </p><p>2、继承破坏了封装，对于父类而言，它的实现细节对与子类来说都是透明的。    </p><p>3、继承是一种强耦合关系。</p><p>问一问自己是否需要从子类向父类进行向上转型。==如果必须向上转型，则继承是必要的==，但是如果不需要，则应当好好考虑自己是否需要继承。         </p><hr><h3 id="Java特性-多态"><a href="#Java特性-多态" class="headerlink" title="Java特性 - 多态"></a>Java特性 - 多态</h3><h3 id="多态原理"><a href="#多态原理" class="headerlink" title="多态原理"></a><a href="http://hxraid.iteye.com/blog/428891" target="_blank" rel="noopener">多态原理</a></h3><p>父类或者接口的引用指向其子类的对象  </p><p>只有在运行的时候才会知道引用变量所指向的具体实例对象。</p><p><strong>多态的好处</strong>    </p><ul><li>提高了代码的扩展性<br>原来代码传入一个接口或者类<br>扩展时，传入一个子类，原来的代码不用变，==由子类重写原来的方法，原来的引用会指向子类重写后的方法==<br>不用重新定义一个方法，传入新的对象</li></ul><p>由于继承了父类的子类对象可以==向上转型==为父类对象，所以可以定义==一个父类对象的引用指向子类对象==  </p><p>指向子类的父类引用由于向上转型了，它只能访问父类中拥有的方法和属性，而==对于子类中存在而父类中不存在的方法，该引用是不能使用的==，尽管是重载该方法。<br>若==子类重写==了父类中的某些方法，在调用该些方法的时候，必定是使用子类中定义的这些方法（动态连接、动态调用）。</p><h3 id="多态时成员的特点"><a href="#多态时成员的特点" class="headerlink" title="多态时成员的特点"></a>多态时成员的特点</h3><p>Animal cat = new Cat;</p><ol><li>成员变量<br>编译和运行都参考等号的左边</li><li>成员函数（非静态）<br>编译看左边，运行看右边  </li><li>静态方法<br>编译和运行都看左边，==静态方法和类绑定，类名直接调用==<h4 id="覆盖重写只发生在方法上，父类的属性无法被覆盖"><a href="#覆盖重写只发生在方法上，父类的属性无法被覆盖" class="headerlink" title="覆盖重写只发生在方法上，父类的属性无法被覆盖"></a>覆盖重写只发生在方法上，父类的属性无法被覆盖</h4></li></ol><p><strong>为了在父类引用中使用子类的特有方法，可以将父类对象==向下转型==，转换成对应的子类引用</strong></p><h3 id="判断对象具体类型的关键字"><a href="#判断对象具体类型的关键字" class="headerlink" title="判断对象具体类型的关键字"></a>判断对象具体类型的关键字</h3><p><strong>==instanceof==</strong>，通常用于向下转型前进行健壮性的判断</p><blockquote><p>多态的三个必要条件 </p></blockquote><ul><li>继承、实现：在多态中必须存在有继承关系的子类和父类或者实现类接口的类。<ul><li>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</li></ul></li></ul><blockquote><p>多态的实现形式 </p></blockquote><ul><li>继承<br>对于引用子类的父类类型，在处理该引用时，它适用于继承该父类的所有子类，子类对象的不同，对方法的实现也就不同，执行相同动作产生的行为也就不同。<br>==如果父类是抽象类，那么子类必须要实现父类中所有的抽象方法==，这样该父类所有的子类一定存在统一的对外接口，但其内部的具体实现可以各异。<br>这样我们就可以使用顶层类提供的统一接口来处理该层次的方法。</li><li>接口<br>继承都是单继承，只能为一组相关的类提供一致的服务接口。但是接口可以是多继承多实现，它能够利用一组相关或者不相关的接口进行组合与扩充，能够对外提供一致的服务接口。<br>所以它相对于继承来说有更好的灵活性。</li></ul><p><a href="http://blog.csdn.net/chenssy/article/details/12786385" target="_blank" rel="noopener">根据继承链中方法调用的优先级来确认方法，该优先级为：  </a><br>this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/chenssy/article/details/12757911&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java提高篇1 - 封装&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Java特性-封装&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java基础与提高" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%8F%90%E9%AB%98/"/>
    
    
      <category term="Java基础特性" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>动态代理原理分析</title>
    <link href="http://yoursite.com/2020/05/23/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%8F%90%E9%AB%98-2017-08-30-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/05/23/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%8F%90%E9%AB%98-2017-08-30-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/</id>
    <published>2020-05-23T04:49:31.000Z</published>
    <updated>2020-05-23T04:49:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理类的字节码是在程序运行期间由JVM根据反射等机制动态的生成，所以==不存在代理类的class文件==。代理类和委托类的关系是在程序运行时确定。</p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-proxy1/index.html" target="_blank" rel="noopener">Java 动态代理机制分析及扩展，第 1 部分</a>  </p><p><a href="http://blog.csdn.net/mhmyqn/article/details/48474815" target="_blank" rel="noopener">动态代理分析2</a></p><p><a href="http://www.cnblogs.com/MOBIN/p/5597215.html" target="_blank" rel="noopener">动态代理分析</a></p><h3 id="相关的类和接口"><a href="#相关的类和接口" class="headerlink" title="相关的类和接口"></a>相关的类和接口</h3><ul><li><p>java.lang.reflect.Proxy：<br>这是 Java 动态代理机制的主类，它提供了一组静态方法来==为一组接口动态地生成代理类及其对象==</p><ul><li><p>// 方法 1: 该方法用于获取指定代理对象所关联的调用处理器<br>static InvocationHandler getInvocationHandler(Object proxy) </p></li><li><p>// 方法 4：该方法用于为指定类装载器、一组接口及调用处理器==生成动态代理类实例==<br>static Object newProxyInstance(ClassLoader loader, Class[] interfaces,<br>InvocationHandler h)</p></li></ul></li><li><p>java.lang.reflect.InvocationHandler：<br>这是调用处理器接口，它自定义了一个 invoke 方法，用于集中处理在动态代理类对象上的方法调用，通常在该方法中实现对委托类的代理访问。</p><ul><li>// 该方法负责集中处理动态代理类上的所有方法调用。第一个参数既是代理类实例，第二个参数是被调用的方法对象<br>// 第三个方法是调用参数。调用处理器根据这三个参数进行预处理或分派到委托类实例上发射执行<br>Object invoke(Object proxy, Method method, Object[] args)</li></ul></li></ul><p>==动态代理类==与普通类的唯一区别就是其字节码是由 ==JVM 在运行时动态生成的而非预存在于任何一个 .class 文件中==。<br>通过类装载器来进行装载才能使用</p><h3 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h3><ol><li><p>通过实现 InvocationHandler 接口==创建自己的调用处理器==；  </p></li><li><p>通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来==创建动态代理类==；</p></li><li><p>通过反射机制==获得动态代理类的构造函数==，其唯一参数类型是调用处理器接口类型；</p></li><li><p>通过构造函数==创建动态代理类实例，==构造时调用处理器对象作为参数被传入====</p></li></ol><p>实际使用过程更加简单，因为 Proxy 的静态方法 newProxyInstance 已经为我们封装了步骤 2 到步骤 4 的过程，所以简化后的过程如下    </p><ol><li><p>// InvocationHandlerImpl 实现了 InvocationHandler 接口，并能实现方法调用从代理类到委托类的分派转发<br>InvocationHandler handler = new InvocationHandlerImpl(..); </p></li><li><p>// 通过 Proxy 直接创建动态代理类实例<br>Interface proxy = (Interface)Proxy.newProxyInstance( classLoader,<br>new Class[] { Interface.class }, handler ); </p></li></ol><h3 id="Java-动态代理机制的一些特点。"><a href="#Java-动态代理机制的一些特点。" class="headerlink" title="Java 动态代理机制的一些特点。"></a>Java 动态代理机制的一些特点。</h3><ul><li>包：<br>如果所代理的接口都是 public 的，那么它将被定义在顶层包（即包路径为空）<br>如果所代理的接口中有非 public 的接口（因为接口不能被定义为 protect 或 private，所以除 public 之外就是默认的 package 访问级别），那么它将被定义在该接口所在包（假设代理了 com.ibm.developerworks 包中的某非 public 接口 A，那么新生成的代理类所在的包就是 com.ibm.developerworks），<br>这样设计的目的是为了最大程度的保证动态代理类不会因为包管理的问题而无法被成功定义并访问；    </li><li>类修饰符：<br>==该代理类具有 final 和 public 修饰符==，意味着它可以被所有的类访问，但是不能被再度继承；</li><li>类名：<br>格式是“$ProxyN”，其中 N 是一个逐一递增的阿拉伯数字，代表 Proxy 类第 N 次生成的动态代理类，<br>值得注意的一点是，并不是每次调用 Proxy 的静态方法创建动态代理类都会使得 N 值增加，原因是如果对同一组接口（包括接口排列的顺序相同）试图重复创建动态代理类，它会很聪明地返回先前已经创建好的代理类的类对象，而不会再尝试去创建一个全新的代理类，<br>这样可以节省不必要的代码重复生成，提高了代理类的创建效率。</li><li>4）类继承关系：<br>该类的继承了Proxy类、实现了一组接口</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;动态代理&quot;&gt;&lt;a href=&quot;#动态代理&quot; class=&quot;headerlink&quot; title=&quot;动态代理&quot;&gt;&lt;/a&gt;动态代理&lt;/h3&gt;&lt;p&gt;动态代理类的字节码是在程序运行期间由JVM根据反射等机制动态的生成，所以==不存在代理类的class文件==。代理类和委托类
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础与提高" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%8F%90%E9%AB%98/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/05/22/hello-world/"/>
    <id>http://yoursite.com/2020/05/22/hello-world/</id>
    <published>2020-05-22T15:03:10.000Z</published>
    <updated>2020-05-22T15:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
